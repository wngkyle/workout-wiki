type Query {
    movement(filter: String, skip: Int, take: Int, orderBy: MovementOrderByInput): [Movement!]!
    requestedMovement(filter: String, skip: Int, take: Int, orderBy: MovementOrderByInput): [RequestedMovement!]!
    user(filter: String, skip: Int, take: Int): [User!]!
    admin(filter: String, skip: Int, take: Int): [Admin!]!
    exercise(filter: String, skip: Int, take: Int): [Exercise!]!
    targetMuscle(filter: String, skip: Int, take: Int): [TargetMuscle!]!
    movementPattern(filter: String, skip: Int, take: Int): [MovementPattern!]!
    equipment(filter: String, skip: Int, take: Int): [Equipment!]!
    bookmark(filter: String): [Bookmark!]!
}

type Mutation {
    signup(email: String!, password: String!, name: String!): AuthPayload!
    login(email: String!, password: String!): AuthPayload! 
    adminSignUp(email: String!, password: String!, name: String!, adminSignupKey: String!): AdminAuthPayload!
    adminLogin(email: String!, password: String!): AdminAuthPayload!
    requestMovement(name: String!, skillLevel: String!, description: String!, exercise: String!, targetMuscle: String!, movementPattern: String!, equipment: String!): RequestedMovement!
    addExercise(type: String!): Exercise!
    addTargetMuscle(part: String!): TargetMuscle!
    addMovementPattern(pattern: String!): MovementPattern!
    addEquipment(type: String!): Equipment!
    addBookmark(movementName: String, movementId: Int): Bookmark!
    approveRequestedMovement(requestedMovementId: Int, requestedMovementName: String): Movement!
}

type User {
    id: ID!
    name: String!
    email: String!
    bookmark: Bookmark!
    postedMovement: [Movement!]!
    requestedMovement: [RequestedMovement!]!
}

type Admin {
    id: ID!
    name: String!
    email: String!
    role: Role!     
}

enum Role {
    User
    Admin
}

type AuthPayload {
    token: String!
    user: User!
}

type AdminAuthPayload {
    token: String!
    admin: Admin!
}

type Bookmark {
    id: ID!
    movement: [Movement!]!
    user: User!
}

type RequestedMovement {
    id: ID!
    name: String!
    skillLevel: String!
    description: String!
    exercise: String!
    targetMuscle: String!
    movementPattern: String!
    equipment: String!
    postedBy: User!
}

type Movement {
    id: ID!
    name: String!
    skillLevel: String!
    description: String!
    exercise: Exercise!
    targetMuscle: TargetMuscle!
    movementPattern: MovementPattern!
    equipment: Equipment!
    postedBy: User!
    postedByAdmin: Admin!
}

type Exercise {
    id: ID!
    type: String!
    movement: [Movement!]!
}

type TargetMuscle {
    id: ID!
    part: String!
    movement: [Movement!]!
}

type MovementPattern {
    id: ID!
    pattern: String!
    movement: [Movement!]!
}

type Equipment {
    id: ID!
    type: String!
    movement: [Movement!]!
}

input MovementOrderByInput {
    name: Sort
    exercise: Sort
    targetMuscle: Sort
    movementPattern: Sort
    equipment: Sort
    skillLevel: Sort
    postedBy: Sort
}

enum Sort {
    asc 
    desc 
}
